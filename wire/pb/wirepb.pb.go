// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wirepb.proto

/*
	Package wirepb is a generated protocol buffer package.

	It is generated from these files:
		wirepb.proto

	It has these top-level messages:
		Block
		BlockHeader
		Hash
		Proof
		PublicKey
		PrivateKey
		Signature
		BigInt
		ProposalArea
		Proposal
		Punishment
		Tx
		OutPoint
		TxIn
		TxOut
		BlockBase
*/
package wirepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Proto for Blocks
type Block struct {
	Header       *BlockHeader  `protobuf:"bytes,1,opt,name=header" json:"header"`
	Proposals    *ProposalArea `protobuf:"bytes,2,opt,name=Proposals" json:"Proposals"`
	Transactions []*Tx         `protobuf:"bytes,3,rep,name=Transactions" json:"Transactions"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{0} }

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetProposals() *ProposalArea {
	if m != nil {
		return m.Proposals
	}
	return nil
}

func (m *Block) GetTransactions() []*Tx {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// Proto for BlockHeaders
type BlockHeader struct {
	ChainID         *Hash        `protobuf:"bytes,1,opt,name=chain_id,json=chainId" json:"chain_id"`
	Version         uint64       `protobuf:"varint,2,opt,name=version,proto3" json:"version"`
	Height          uint64       `protobuf:"varint,3,opt,name=height,proto3" json:"height"`
	Timestamp       int64        `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp"`
	Previous        *Hash        `protobuf:"bytes,5,opt,name=previous" json:"previous"`
	TransactionRoot *Hash        `protobuf:"bytes,6,opt,name=transaction_root,json=transactionRoot" json:"transaction_root"`
	ProposalRoot    *Hash        `protobuf:"bytes,7,opt,name=proposal_root,json=proposalRoot" json:"proposal_root"`
	Target          *BigInt      `protobuf:"bytes,8,opt,name=target" json:"target"`
	Challenge       *BigInt      `protobuf:"bytes,9,opt,name=challenge" json:"challenge"`
	PubKey          *PublicKey   `protobuf:"bytes,10,opt,name=pub_key,json=pubKey" json:"pub_key"`
	Proof           *Proof       `protobuf:"bytes,11,opt,name=proof" json:"proof"`
	SigQ            *Signature   `protobuf:"bytes,12,opt,name=sig_q,json=sigQ" json:"sig_q"`
	Sig2            *Signature   `protobuf:"bytes,13,opt,name=sig2" json:"sig2"`
	BanList         []*PublicKey `protobuf:"bytes,14,rep,name=ban_list,json=banList" json:"ban_list"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{1} }

func (m *BlockHeader) GetChainID() *Hash {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *BlockHeader) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeader) GetPrevious() *Hash {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *BlockHeader) GetTransactionRoot() *Hash {
	if m != nil {
		return m.TransactionRoot
	}
	return nil
}

func (m *BlockHeader) GetProposalRoot() *Hash {
	if m != nil {
		return m.ProposalRoot
	}
	return nil
}

func (m *BlockHeader) GetTarget() *BigInt {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *BlockHeader) GetChallenge() *BigInt {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *BlockHeader) GetPubKey() *PublicKey {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *BlockHeader) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *BlockHeader) GetSigQ() *Signature {
	if m != nil {
		return m.SigQ
	}
	return nil
}

func (m *BlockHeader) GetSig2() *Signature {
	if m != nil {
		return m.Sig2
	}
	return nil
}

func (m *BlockHeader) GetBanList() []*PublicKey {
	if m != nil {
		return m.BanList
	}
	return nil
}

// Proto for Hashes
type Hash struct {
	S0 uint64 `protobuf:"fixed64,1,opt,name=s0,proto3" json:"s0"`
	S1 uint64 `protobuf:"fixed64,2,opt,name=s1,proto3" json:"s1"`
	S2 uint64 `protobuf:"fixed64,3,opt,name=s2,proto3" json:"s2"`
	S3 uint64 `protobuf:"fixed64,4,opt,name=s3,proto3" json:"s3"`
}

func (m *Hash) Reset()                    { *m = Hash{} }
func (m *Hash) String() string            { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()               {}
func (*Hash) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{2} }

func (m *Hash) GetS0() uint64 {
	if m != nil {
		return m.S0
	}
	return 0
}

func (m *Hash) GetS1() uint64 {
	if m != nil {
		return m.S1
	}
	return 0
}

func (m *Hash) GetS2() uint64 {
	if m != nil {
		return m.S2
	}
	return 0
}

func (m *Hash) GetS3() uint64 {
	if m != nil {
		return m.S3
	}
	return 0
}

// Proto for Proofs
type Proof struct {
	X         []byte `protobuf:"bytes,1,opt,name=x,proto3" json:"x"`
	XPrime    []byte `protobuf:"bytes,2,opt,name=x_prime,json=xPrime,proto3" json:"x_prime"`
	BitLength int32  `protobuf:"varint,3,opt,name=bit_length,json=bitLength,proto3" json:"bit_length"`
}

func (m *Proof) Reset()                    { *m = Proof{} }
func (m *Proof) String() string            { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()               {}
func (*Proof) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{3} }

func (m *Proof) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *Proof) GetXPrime() []byte {
	if m != nil {
		return m.XPrime
	}
	return nil
}

func (m *Proof) GetBitLength() int32 {
	if m != nil {
		return m.BitLength
	}
	return 0
}

// Proto for Crypto
type PublicKey struct {
	RawX *BigInt `protobuf:"bytes,1,opt,name=raw_x,json=rawX" json:"raw_x"`
	RawY *BigInt `protobuf:"bytes,2,opt,name=raw_y,json=rawY" json:"raw_y"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{4} }

func (m *PublicKey) GetRawX() *BigInt {
	if m != nil {
		return m.RawX
	}
	return nil
}

func (m *PublicKey) GetRawY() *BigInt {
	if m != nil {
		return m.RawY
	}
	return nil
}

type PrivateKey struct {
	RawPub *PublicKey `protobuf:"bytes,1,opt,name=raw_pub,json=rawPub" json:"raw_pub"`
	RawD   *BigInt    `protobuf:"bytes,2,opt,name=raw_d,json=rawD" json:"raw_d"`
}

func (m *PrivateKey) Reset()                    { *m = PrivateKey{} }
func (m *PrivateKey) String() string            { return proto.CompactTextString(m) }
func (*PrivateKey) ProtoMessage()               {}
func (*PrivateKey) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{5} }

func (m *PrivateKey) GetRawPub() *PublicKey {
	if m != nil {
		return m.RawPub
	}
	return nil
}

func (m *PrivateKey) GetRawD() *BigInt {
	if m != nil {
		return m.RawD
	}
	return nil
}

type Signature struct {
	RawR *BigInt `protobuf:"bytes,1,opt,name=raw_r,json=rawR" json:"raw_r"`
	RawS *BigInt `protobuf:"bytes,2,opt,name=raw_s,json=rawS" json:"raw_s"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{6} }

func (m *Signature) GetRawR() *BigInt {
	if m != nil {
		return m.RawR
	}
	return nil
}

func (m *Signature) GetRawS() *BigInt {
	if m != nil {
		return m.RawS
	}
	return nil
}

// Proto for BigInt
type BigInt struct {
	RawAbs []byte `protobuf:"bytes,1,opt,name=raw_abs,json=rawAbs,proto3" json:"raw_abs"`
}

func (m *BigInt) Reset()                    { *m = BigInt{} }
func (m *BigInt) String() string            { return proto.CompactTextString(m) }
func (*BigInt) ProtoMessage()               {}
func (*BigInt) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{7} }

func (m *BigInt) GetRawAbs() []byte {
	if m != nil {
		return m.RawAbs
	}
	return nil
}

// Proto for ProposalAreas
type ProposalArea struct {
	Punishments    []*Punishment `protobuf:"bytes,1,rep,name=punishments" json:"punishments"`
	PlaceHolder    *Proposal     `protobuf:"bytes,2,opt,name=place_holder,json=placeHolder" json:"place_holder"`
	OtherProposals []*Proposal   `protobuf:"bytes,3,rep,name=other_proposals,json=otherProposals" json:"other_proposals"`
}

func (m *ProposalArea) Reset()                    { *m = ProposalArea{} }
func (m *ProposalArea) String() string            { return proto.CompactTextString(m) }
func (*ProposalArea) ProtoMessage()               {}
func (*ProposalArea) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{8} }

func (m *ProposalArea) GetPunishments() []*Punishment {
	if m != nil {
		return m.Punishments
	}
	return nil
}

func (m *ProposalArea) GetPlaceHolder() *Proposal {
	if m != nil {
		return m.PlaceHolder
	}
	return nil
}

func (m *ProposalArea) GetOtherProposals() []*Proposal {
	if m != nil {
		return m.OtherProposals
	}
	return nil
}

type Proposal struct {
	Version int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version"`
	Type    int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type"`
	Content []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content"`
}

func (m *Proposal) Reset()                    { *m = Proposal{} }
func (m *Proposal) String() string            { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()               {}
func (*Proposal) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{9} }

func (m *Proposal) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Proposal) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Proposal) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Punishment struct {
	Version    int32        `protobuf:"varint,1,opt,name=version,proto3" json:"version"`
	Type       int32        `protobuf:"varint,2,opt,name=type,proto3" json:"type"`
	TestimonyA *BlockHeader `protobuf:"bytes,3,opt,name=testimony_a,json=testimonyA" json:"testimony_a"`
	TestimonyB *BlockHeader `protobuf:"bytes,4,opt,name=testimony_b,json=testimonyB" json:"testimony_b"`
}

func (m *Punishment) Reset()                    { *m = Punishment{} }
func (m *Punishment) String() string            { return proto.CompactTextString(m) }
func (*Punishment) ProtoMessage()               {}
func (*Punishment) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{10} }

func (m *Punishment) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Punishment) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Punishment) GetTestimonyA() *BlockHeader {
	if m != nil {
		return m.TestimonyA
	}
	return nil
}

func (m *Punishment) GetTestimonyB() *BlockHeader {
	if m != nil {
		return m.TestimonyB
	}
	return nil
}

// Proto for Transactions
type Tx struct {
	Version  int32    `protobuf:"varint,1,opt,name=version,proto3" json:"version"`
	TxIn     []*TxIn  `protobuf:"bytes,2,rep,name=tx_in,json=txIn" json:"tx_in"`
	TxOut    []*TxOut `protobuf:"bytes,3,rep,name=tx_out,json=txOut" json:"tx_out"`
	LockTime uint32   `protobuf:"varint,4,opt,name=lock_time,json=lockTime,proto3" json:"lock_time"`
	Payload  []byte   `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (m *Tx) String() string            { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{11} }

func (m *Tx) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Tx) GetTxIn() []*TxIn {
	if m != nil {
		return m.TxIn
	}
	return nil
}

func (m *Tx) GetTxOut() []*TxOut {
	if m != nil {
		return m.TxOut
	}
	return nil
}

func (m *Tx) GetLockTime() uint32 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

func (m *Tx) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type OutPoint struct {
	Hash  *Hash  `protobuf:"bytes,1,opt,name=hash" json:"hash"`
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index"`
}

func (m *OutPoint) Reset()                    { *m = OutPoint{} }
func (m *OutPoint) String() string            { return proto.CompactTextString(m) }
func (*OutPoint) ProtoMessage()               {}
func (*OutPoint) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{12} }

func (m *OutPoint) GetHash() *Hash {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *OutPoint) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type TxIn struct {
	PreviousOutPoint *OutPoint `protobuf:"bytes,1,opt,name=previous_out_point,json=previousOutPoint" json:"previous_out_point"`
	Witness          [][]byte  `protobuf:"bytes,2,rep,name=witness" json:"witness"`
	Sequence         uint32    `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence"`
}

func (m *TxIn) Reset()                    { *m = TxIn{} }
func (m *TxIn) String() string            { return proto.CompactTextString(m) }
func (*TxIn) ProtoMessage()               {}
func (*TxIn) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{13} }

func (m *TxIn) GetPreviousOutPoint() *OutPoint {
	if m != nil {
		return m.PreviousOutPoint
	}
	return nil
}

func (m *TxIn) GetWitness() [][]byte {
	if m != nil {
		return m.Witness
	}
	return nil
}

func (m *TxIn) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type TxOut struct {
	Value    int64  `protobuf:"varint,1,opt,name=value,proto3" json:"value"`
	PkScript []byte `protobuf:"bytes,2,opt,name=pk_script,json=pkScript,proto3" json:"pk_script"`
}

func (m *TxOut) Reset()                    { *m = TxOut{} }
func (m *TxOut) String() string            { return proto.CompactTextString(m) }
func (*TxOut) ProtoMessage()               {}
func (*TxOut) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{14} }

func (m *TxOut) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TxOut) GetPkScript() []byte {
	if m != nil {
		return m.PkScript
	}
	return nil
}

type BlockBase struct {
	Header    *BlockHeader  `protobuf:"bytes,1,opt,name=header" json:"header"`
	Proposals *ProposalArea `protobuf:"bytes,2,opt,name=Proposals" json:"Proposals"`
}

func (m *BlockBase) Reset()                    { *m = BlockBase{} }
func (m *BlockBase) String() string            { return proto.CompactTextString(m) }
func (*BlockBase) ProtoMessage()               {}
func (*BlockBase) Descriptor() ([]byte, []int) { return fileDescriptorWirepb, []int{15} }

func (m *BlockBase) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockBase) GetProposals() *ProposalArea {
	if m != nil {
		return m.Proposals
	}
	return nil
}

func init() {
	proto.RegisterType((*Block)(nil), "wirepb.Block")
	proto.RegisterType((*BlockHeader)(nil), "wirepb.BlockHeader")
	proto.RegisterType((*Hash)(nil), "wirepb.Hash")
	proto.RegisterType((*Proof)(nil), "wirepb.Proof")
	proto.RegisterType((*PublicKey)(nil), "wirepb.PublicKey")
	proto.RegisterType((*PrivateKey)(nil), "wirepb.PrivateKey")
	proto.RegisterType((*Signature)(nil), "wirepb.Signature")
	proto.RegisterType((*BigInt)(nil), "wirepb.BigInt")
	proto.RegisterType((*ProposalArea)(nil), "wirepb.ProposalArea")
	proto.RegisterType((*Proposal)(nil), "wirepb.Proposal")
	proto.RegisterType((*Punishment)(nil), "wirepb.Punishment")
	proto.RegisterType((*Tx)(nil), "wirepb.Tx")
	proto.RegisterType((*OutPoint)(nil), "wirepb.OutPoint")
	proto.RegisterType((*TxIn)(nil), "wirepb.TxIn")
	proto.RegisterType((*TxOut)(nil), "wirepb.TxOut")
	proto.RegisterType((*BlockBase)(nil), "wirepb.BlockBase")
}
func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Proposals != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Proposals.Size()))
		n2, err := m.Proposals.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintWirepb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChainID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.ChainID.Size()))
		n3, err := m.ChainID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Version))
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Height))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Timestamp))
	}
	if m.Previous != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Previous.Size()))
		n4, err := m.Previous.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.TransactionRoot != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.TransactionRoot.Size()))
		n5, err := m.TransactionRoot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.ProposalRoot != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.ProposalRoot.Size()))
		n6, err := m.ProposalRoot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Target != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Target.Size()))
		n7, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Challenge != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Challenge.Size()))
		n8, err := m.Challenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.PubKey != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.PubKey.Size()))
		n9, err := m.PubKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Proof != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Proof.Size()))
		n10, err := m.Proof.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.SigQ != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.SigQ.Size()))
		n11, err := m.SigQ.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Sig2 != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Sig2.Size()))
		n12, err := m.Sig2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.BanList) > 0 {
		for _, msg := range m.BanList {
			dAtA[i] = 0x72
			i++
			i = encodeVarintWirepb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Hash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hash) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.S0 != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.S0))
		i += 8
	}
	if m.S1 != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.S1))
		i += 8
	}
	if m.S2 != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.S2))
		i += 8
	}
	if m.S3 != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.S3))
		i += 8
	}
	return i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.X) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(len(m.X)))
		i += copy(dAtA[i:], m.X)
	}
	if len(m.XPrime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(len(m.XPrime)))
		i += copy(dAtA[i:], m.XPrime)
	}
	if m.BitLength != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.BitLength))
	}
	return i, nil
}

func (m *PublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RawX != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.RawX.Size()))
		n13, err := m.RawX.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.RawY != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.RawY.Size()))
		n14, err := m.RawY.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *PrivateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RawPub != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.RawPub.Size()))
		n15, err := m.RawPub.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.RawD != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.RawD.Size()))
		n16, err := m.RawD.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RawR != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.RawR.Size()))
		n17, err := m.RawR.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.RawS != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.RawS.Size()))
		n18, err := m.RawS.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *BigInt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigInt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RawAbs) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(len(m.RawAbs)))
		i += copy(dAtA[i:], m.RawAbs)
	}
	return i, nil
}

func (m *ProposalArea) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalArea) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Punishments) > 0 {
		for _, msg := range m.Punishments {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWirepb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PlaceHolder != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.PlaceHolder.Size()))
		n19, err := m.PlaceHolder.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.OtherProposals) > 0 {
		for _, msg := range m.OtherProposals {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintWirepb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Version))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Type))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *Punishment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Punishment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Version))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Type))
	}
	if m.TestimonyA != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.TestimonyA.Size()))
		n20, err := m.TestimonyA.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.TestimonyB != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.TestimonyB.Size()))
		n21, err := m.TestimonyB.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Version))
	}
	if len(m.TxIn) > 0 {
		for _, msg := range m.TxIn {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWirepb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TxOut) > 0 {
		for _, msg := range m.TxOut {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintWirepb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LockTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.LockTime))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *OutPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutPoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hash != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Hash.Size()))
		n22, err := m.Hash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *TxIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxIn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PreviousOutPoint != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.PreviousOutPoint.Size()))
		n23, err := m.PreviousOutPoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if len(m.Witness) > 0 {
		for _, b := range m.Witness {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWirepb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Sequence != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Sequence))
	}
	return i, nil
}

func (m *TxOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Value))
	}
	if len(m.PkScript) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(len(m.PkScript)))
		i += copy(dAtA[i:], m.PkScript)
	}
	return i, nil
}

func (m *BlockBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Header.Size()))
		n24, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.Proposals != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWirepb(dAtA, i, uint64(m.Proposals.Size()))
		n25, err := m.Proposals.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func encodeVarintWirepb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Block) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.Proposals != nil {
		l = m.Proposals.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovWirepb(uint64(l))
		}
	}
	return n
}

func (m *BlockHeader) Size() (n int) {
	var l int
	_ = l
	if m.ChainID != nil {
		l = m.ChainID.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovWirepb(uint64(m.Version))
	}
	if m.Height != 0 {
		n += 1 + sovWirepb(uint64(m.Height))
	}
	if m.Timestamp != 0 {
		n += 1 + sovWirepb(uint64(m.Timestamp))
	}
	if m.Previous != nil {
		l = m.Previous.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.TransactionRoot != nil {
		l = m.TransactionRoot.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.ProposalRoot != nil {
		l = m.ProposalRoot.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.Challenge != nil {
		l = m.Challenge.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.SigQ != nil {
		l = m.SigQ.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.Sig2 != nil {
		l = m.Sig2.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if len(m.BanList) > 0 {
		for _, e := range m.BanList {
			l = e.Size()
			n += 1 + l + sovWirepb(uint64(l))
		}
	}
	return n
}

func (m *Hash) Size() (n int) {
	var l int
	_ = l
	if m.S0 != 0 {
		n += 9
	}
	if m.S1 != 0 {
		n += 9
	}
	if m.S2 != 0 {
		n += 9
	}
	if m.S3 != 0 {
		n += 9
	}
	return n
}

func (m *Proof) Size() (n int) {
	var l int
	_ = l
	l = len(m.X)
	if l > 0 {
		n += 1 + l + sovWirepb(uint64(l))
	}
	l = len(m.XPrime)
	if l > 0 {
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.BitLength != 0 {
		n += 1 + sovWirepb(uint64(m.BitLength))
	}
	return n
}

func (m *PublicKey) Size() (n int) {
	var l int
	_ = l
	if m.RawX != nil {
		l = m.RawX.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.RawY != nil {
		l = m.RawY.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	return n
}

func (m *PrivateKey) Size() (n int) {
	var l int
	_ = l
	if m.RawPub != nil {
		l = m.RawPub.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.RawD != nil {
		l = m.RawD.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	return n
}

func (m *Signature) Size() (n int) {
	var l int
	_ = l
	if m.RawR != nil {
		l = m.RawR.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.RawS != nil {
		l = m.RawS.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	return n
}

func (m *BigInt) Size() (n int) {
	var l int
	_ = l
	l = len(m.RawAbs)
	if l > 0 {
		n += 1 + l + sovWirepb(uint64(l))
	}
	return n
}

func (m *ProposalArea) Size() (n int) {
	var l int
	_ = l
	if len(m.Punishments) > 0 {
		for _, e := range m.Punishments {
			l = e.Size()
			n += 1 + l + sovWirepb(uint64(l))
		}
	}
	if m.PlaceHolder != nil {
		l = m.PlaceHolder.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if len(m.OtherProposals) > 0 {
		for _, e := range m.OtherProposals {
			l = e.Size()
			n += 1 + l + sovWirepb(uint64(l))
		}
	}
	return n
}

func (m *Proposal) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovWirepb(uint64(m.Version))
	}
	if m.Type != 0 {
		n += 1 + sovWirepb(uint64(m.Type))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovWirepb(uint64(l))
	}
	return n
}

func (m *Punishment) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovWirepb(uint64(m.Version))
	}
	if m.Type != 0 {
		n += 1 + sovWirepb(uint64(m.Type))
	}
	if m.TestimonyA != nil {
		l = m.TestimonyA.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.TestimonyB != nil {
		l = m.TestimonyB.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	return n
}

func (m *Tx) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovWirepb(uint64(m.Version))
	}
	if len(m.TxIn) > 0 {
		for _, e := range m.TxIn {
			l = e.Size()
			n += 1 + l + sovWirepb(uint64(l))
		}
	}
	if len(m.TxOut) > 0 {
		for _, e := range m.TxOut {
			l = e.Size()
			n += 1 + l + sovWirepb(uint64(l))
		}
	}
	if m.LockTime != 0 {
		n += 1 + sovWirepb(uint64(m.LockTime))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovWirepb(uint64(l))
	}
	return n
}

func (m *OutPoint) Size() (n int) {
	var l int
	_ = l
	if m.Hash != nil {
		l = m.Hash.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovWirepb(uint64(m.Index))
	}
	return n
}

func (m *TxIn) Size() (n int) {
	var l int
	_ = l
	if m.PreviousOutPoint != nil {
		l = m.PreviousOutPoint.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if len(m.Witness) > 0 {
		for _, b := range m.Witness {
			l = len(b)
			n += 1 + l + sovWirepb(uint64(l))
		}
	}
	if m.Sequence != 0 {
		n += 1 + sovWirepb(uint64(m.Sequence))
	}
	return n
}

func (m *TxOut) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovWirepb(uint64(m.Value))
	}
	l = len(m.PkScript)
	if l > 0 {
		n += 1 + l + sovWirepb(uint64(l))
	}
	return n
}

func (m *BlockBase) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	if m.Proposals != nil {
		l = m.Proposals.Size()
		n += 1 + l + sovWirepb(uint64(l))
	}
	return n
}

func sovWirepb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWirepb(x uint64) (n int) {
	return sovWirepb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposals == nil {
				m.Proposals = &ProposalArea{}
			}
			if err := m.Proposals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Tx{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainID == nil {
				m.ChainID = &Hash{}
			}
			if err := m.ChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Previous == nil {
				m.Previous = &Hash{}
			}
			if err := m.Previous.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionRoot == nil {
				m.TransactionRoot = &Hash{}
			}
			if err := m.TransactionRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalRoot == nil {
				m.ProposalRoot = &Hash{}
			}
			if err := m.ProposalRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &BigInt{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenge == nil {
				m.Challenge = &BigInt{}
			}
			if err := m.Challenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &PublicKey{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigQ", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SigQ == nil {
				m.SigQ = &Signature{}
			}
			if err := m.SigQ.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sig2 == nil {
				m.Sig2 = &Signature{}
			}
			if err := m.Sig2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BanList = append(m.BanList, &PublicKey{})
			if err := m.BanList[len(m.BanList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field S0", wireType)
			}
			m.S0 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.S0 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field S1", wireType)
			}
			m.S1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.S1 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2", wireType)
			}
			m.S2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.S2 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3", wireType)
			}
			m.S3 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.S3 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.X = append(m.X[:0], dAtA[iNdEx:postIndex]...)
			if m.X == nil {
				m.X = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XPrime", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XPrime = append(m.XPrime[:0], dAtA[iNdEx:postIndex]...)
			if m.XPrime == nil {
				m.XPrime = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitLength", wireType)
			}
			m.BitLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitLength |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawX", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawX == nil {
				m.RawX = &BigInt{}
			}
			if err := m.RawX.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawY", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawY == nil {
				m.RawY = &BigInt{}
			}
			if err := m.RawY.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawPub == nil {
				m.RawPub = &PublicKey{}
			}
			if err := m.RawPub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawD", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawD == nil {
				m.RawD = &BigInt{}
			}
			if err := m.RawD.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawR == nil {
				m.RawR = &BigInt{}
			}
			if err := m.RawR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawS == nil {
				m.RawS = &BigInt{}
			}
			if err := m.RawS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BigInt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigInt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigInt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawAbs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawAbs = append(m.RawAbs[:0], dAtA[iNdEx:postIndex]...)
			if m.RawAbs == nil {
				m.RawAbs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalArea) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalArea: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalArea: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Punishments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Punishments = append(m.Punishments, &Punishment{})
			if err := m.Punishments[len(m.Punishments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceHolder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlaceHolder == nil {
				m.PlaceHolder = &Proposal{}
			}
			if err := m.PlaceHolder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherProposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherProposals = append(m.OtherProposals, &Proposal{})
			if err := m.OtherProposals[len(m.OtherProposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Punishment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Punishment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Punishment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestimonyA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestimonyA == nil {
				m.TestimonyA = &BlockHeader{}
			}
			if err := m.TestimonyA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestimonyB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestimonyB == nil {
				m.TestimonyB = &BlockHeader{}
			}
			if err := m.TestimonyB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxIn = append(m.TxIn, &TxIn{})
			if err := m.TxIn[len(m.TxIn)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOut = append(m.TxOut, &TxOut{})
			if err := m.TxOut[len(m.TxOut)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTime", wireType)
			}
			m.LockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hash == nil {
				m.Hash = &Hash{}
			}
			if err := m.Hash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousOutPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousOutPoint == nil {
				m.PreviousOutPoint = &OutPoint{}
			}
			if err := m.PreviousOutPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Witness", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Witness = append(m.Witness, make([]byte, postIndex-iNdEx))
			copy(m.Witness[len(m.Witness)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkScript", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PkScript = append(m.PkScript[:0], dAtA[iNdEx:postIndex]...)
			if m.PkScript == nil {
				m.PkScript = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWirepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposals == nil {
				m.Proposals = &ProposalArea{}
			}
			if err := m.Proposals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWirepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWirepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWirepb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWirepb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWirepb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWirepb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWirepb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWirepb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWirepb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWirepb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("wirepb.proto", fileDescriptorWirepb) }

var fileDescriptorWirepb = []byte{
	// 981 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0xc6, 0xd9, 0xf5, 0xfe, 0x9c, 0xf5, 0xa6, 0x61, 0xa8, 0xc0, 0xe2, 0x27, 0x4a, 0x0d, 0x94,
	0xa8, 0x54, 0x51, 0xb3, 0xa9, 0x84, 0xe0, 0x02, 0x29, 0x11, 0x42, 0x89, 0x5a, 0xd4, 0x30, 0x09,
	0x12, 0x5c, 0x20, 0x6b, 0xbc, 0x3b, 0x5d, 0x8f, 0xe2, 0x78, 0xa6, 0x33, 0xe3, 0xc4, 0x2b, 0xf1,
	0x20, 0xbd, 0xe2, 0x92, 0x27, 0xe0, 0x01, 0xb8, 0xe4, 0x92, 0x47, 0x40, 0xe1, 0x45, 0xd0, 0x9c,
	0xb5, 0xbd, 0x9b, 0xb2, 0x2c, 0xe2, 0xa2, 0x57, 0x9b, 0xcf, 0xe7, 0x3b, 0x67, 0xbe, 0x39, 0xe7,
	0xf8, 0x73, 0x20, 0xb8, 0x16, 0x9a, 0xab, 0x64, 0x4f, 0x69, 0x69, 0x25, 0xe9, 0xcc, 0x51, 0xf4,
	0xd2, 0x03, 0xff, 0x28, 0x93, 0xe3, 0x0b, 0xf2, 0x29, 0x74, 0x52, 0xce, 0x26, 0x5c, 0x87, 0xde,
	0x8e, 0xb7, 0x3b, 0x18, 0xbd, 0xb5, 0x57, 0x25, 0x60, 0xf8, 0x18, 0x43, 0xb4, 0xa2, 0x90, 0x11,
	0xf4, 0x4f, 0xb5, 0x54, 0xd2, 0xb0, 0xcc, 0x84, 0x1b, 0xc8, 0xbf, 0x5b, 0xf3, 0xeb, 0xc0, 0xa1,
	0xe6, 0x8c, 0x2e, 0x68, 0x64, 0x0f, 0x82, 0x73, 0xcd, 0x72, 0xc3, 0xc6, 0x56, 0xc8, 0xdc, 0x84,
	0xad, 0x9d, 0xd6, 0xee, 0x60, 0x04, 0x75, 0xda, 0x79, 0x49, 0x6f, 0xc5, 0xa3, 0xdf, 0xda, 0x30,
	0x58, 0x3a, 0x9b, 0x7c, 0x02, 0xbd, 0x71, 0xca, 0x44, 0x1e, 0x8b, 0x49, 0x25, 0x31, 0xa8, 0x73,
	0x8f, 0x99, 0x49, 0x69, 0x17, 0xa3, 0x27, 0x13, 0x12, 0x42, 0xf7, 0x8a, 0x6b, 0x23, 0x64, 0x8e,
	0xd2, 0xda, 0xb4, 0x86, 0xe4, 0x6d, 0x77, 0x47, 0x31, 0x4d, 0x6d, 0xd8, 0xc2, 0x40, 0x85, 0xc8,
	0xfb, 0xd0, 0xb7, 0xe2, 0x92, 0x1b, 0xcb, 0x2e, 0x55, 0xd8, 0xde, 0xf1, 0x76, 0x5b, 0x74, 0xf1,
	0x80, 0xec, 0x42, 0x4f, 0x69, 0x7e, 0x25, 0x64, 0x61, 0x42, 0x7f, 0xc5, 0xc1, 0x4d, 0x94, 0x7c,
	0x06, 0x5b, 0x76, 0x71, 0x85, 0x58, 0x4b, 0x69, 0xc3, 0xce, 0x8a, 0x8c, 0x3b, 0x4b, 0x2c, 0x2a,
	0xa5, 0x25, 0xfb, 0x30, 0x54, 0x55, 0xa3, 0xe6, 0x59, 0xdd, 0x15, 0x59, 0x41, 0x4d, 0xc1, 0x94,
	0xfb, 0xd0, 0xb1, 0x4c, 0x4f, 0xb9, 0x0d, 0x7b, 0xc8, 0xdd, 0x6c, 0xe6, 0x25, 0xa6, 0x27, 0xb9,
	0xa5, 0x55, 0x94, 0x3c, 0x84, 0xfe, 0x38, 0x65, 0x59, 0xc6, 0xf3, 0x29, 0x0f, 0xfb, 0x2b, 0xa9,
	0x0b, 0x02, 0x79, 0x00, 0x5d, 0x55, 0x24, 0xf1, 0x05, 0x9f, 0x85, 0x80, 0xdc, 0x37, 0x9b, 0xb1,
	0x16, 0x49, 0x26, 0xc6, 0x4f, 0xf8, 0x8c, 0x76, 0x54, 0x91, 0x3c, 0xe1, 0x33, 0xf2, 0x21, 0xf8,
	0x4a, 0x4b, 0xf9, 0x3c, 0x1c, 0x20, 0x73, 0xb8, 0xb4, 0x00, 0xf2, 0x39, 0x9d, 0xc7, 0xc8, 0x7d,
	0xf0, 0x8d, 0x98, 0xc6, 0x2f, 0xc2, 0xe0, 0x76, 0xb9, 0x33, 0x31, 0xcd, 0x99, 0x2d, 0x34, 0xa7,
	0x6d, 0x23, 0xa6, 0xdf, 0x92, 0x8f, 0xc1, 0xfd, 0x8e, 0xc2, 0xe1, 0x3a, 0xda, 0x88, 0x3c, 0x84,
	0x5e, 0xc2, 0xf2, 0x38, 0x13, 0xc6, 0x86, 0x9b, 0xb8, 0x40, 0x2b, 0x04, 0x76, 0x13, 0x96, 0x3f,
	0x15, 0xc6, 0x46, 0x5f, 0x43, 0xdb, 0x75, 0x8e, 0x6c, 0xc2, 0x86, 0x79, 0x84, 0x4b, 0xd3, 0xa1,
	0x1b, 0xe6, 0x11, 0xe2, 0x7d, 0x5c, 0x0e, 0x87, 0xf7, 0x11, 0x8f, 0x70, 0x27, 0x1c, 0x1e, 0x21,
	0x3e, 0xc0, 0x45, 0x70, 0xf8, 0x20, 0xfa, 0x06, 0x7c, 0xbc, 0x14, 0x09, 0xc0, 0x2b, 0xb1, 0x4e,
	0x40, 0xbd, 0x92, 0xbc, 0x03, 0xdd, 0x32, 0x56, 0x5a, 0x5c, 0x72, 0xac, 0x15, 0xd0, 0x4e, 0x79,
	0xea, 0x10, 0xf9, 0x00, 0x20, 0x11, 0x36, 0x76, 0x2d, 0xb5, 0x29, 0xd6, 0xf5, 0x69, 0x3f, 0x11,
	0xf6, 0x29, 0x3e, 0x88, 0xbe, 0x83, 0x7e, 0x23, 0xd6, 0x75, 0x51, 0xb3, 0xeb, 0xb8, 0xac, 0x76,
	0xfa, 0xd5, 0xd9, 0xb4, 0x35, 0xbb, 0xfe, 0xbe, 0x26, 0xcd, 0xaa, 0x77, 0x6d, 0x15, 0xe9, 0x87,
	0xe8, 0x47, 0x80, 0x53, 0x2d, 0xae, 0x98, 0xe5, 0xae, 0xee, 0x03, 0xe8, 0xba, 0x14, 0x55, 0x24,
	0x55, 0xe5, 0x55, 0x93, 0xd4, 0xec, 0xfa, 0xb4, 0x48, 0xea, 0xf2, 0x93, 0x35, 0xe5, 0xbf, 0x72,
	0xaa, 0x9b, 0x69, 0xd4, 0x19, 0x7a, 0x8d, 0x6a, 0x5a, 0x93, 0xcc, 0x9a, 0xb2, 0x67, 0xd1, 0x3d,
	0xe8, 0xcc, 0xb1, 0x6b, 0xa7, 0xa3, 0xb3, 0xc4, 0x54, 0x2d, 0x76, 0xf2, 0x0e, 0x13, 0x13, 0xfd,
	0xea, 0x41, 0xb0, 0xec, 0x2a, 0xe4, 0x31, 0x0c, 0x54, 0x91, 0x0b, 0x93, 0x5e, 0xf2, 0xdc, 0x3a,
	0xb6, 0x5b, 0x04, 0xb2, 0xb8, 0x5f, 0x1d, 0xa2, 0xcb, 0x34, 0x72, 0x00, 0x81, 0xca, 0xd8, 0x98,
	0xc7, 0xa9, 0xcc, 0x9c, 0xcf, 0xcd, 0x55, 0x6d, 0xbd, 0xea, 0x5b, 0x74, 0x80, 0xac, 0x63, 0x24,
	0x91, 0xcf, 0xe1, 0x8e, 0xb4, 0x29, 0xd7, 0xb1, 0x6a, 0xfc, 0x6e, 0x6e, 0x5c, 0xff, 0xcc, 0xdb,
	0x44, 0x62, 0x63, 0x78, 0x11, 0x85, 0x5e, 0x0d, 0x96, 0x3d, 0xc9, 0xc3, 0x75, 0x68, 0x3c, 0x89,
	0x40, 0xdb, 0xce, 0xd4, 0x7c, 0x83, 0x7c, 0x8a, 0x7f, 0x3b, 0xf6, 0x58, 0xe6, 0x96, 0xe7, 0x73,
	0xa3, 0x0a, 0x68, 0x0d, 0xa3, 0x5f, 0x3c, 0x80, 0xc5, 0xfd, 0xfe, 0x67, 0xd9, 0xc7, 0x30, 0xb0,
	0xdc, 0x58, 0x71, 0x29, 0xf3, 0x59, 0xcc, 0xb0, 0xf4, 0xbf, 0xf8, 0x3c, 0x34, 0xbc, 0xc3, 0xdb,
	0x59, 0x09, 0xbe, 0x15, 0xff, 0x99, 0x75, 0x14, 0xfd, 0xec, 0xc1, 0xc6, 0x79, 0xb9, 0x46, 0xe0,
	0x3d, 0xf0, 0x6d, 0x19, 0x0b, 0xe7, 0xd1, 0xad, 0x65, 0xab, 0x3b, 0x2f, 0x4f, 0x72, 0xda, 0xb6,
	0xe5, 0x49, 0x4e, 0x3e, 0x82, 0x8e, 0x2d, 0x63, 0x59, 0xd8, 0xaa, 0xe5, 0xc3, 0x05, 0xe7, 0x59,
	0x61, 0xa9, 0x6f, 0xdd, 0x0f, 0x79, 0x0f, 0xfa, 0x4e, 0x43, 0xec, 0x0c, 0x1b, 0xd5, 0x0d, 0x69,
	0xcf, 0x3d, 0x38, 0x77, 0x6f, 0x62, 0x08, 0x5d, 0xc5, 0x66, 0x99, 0x64, 0x13, 0xb4, 0xee, 0x80,
	0xd6, 0x30, 0x3a, 0x82, 0xde, 0xb3, 0xc2, 0x9e, 0x4a, 0x91, 0x5b, 0xb2, 0x03, 0xed, 0x94, 0x99,
	0x74, 0xe5, 0x67, 0x05, 0x23, 0xe4, 0x2e, 0xf8, 0x22, 0x9f, 0xf0, 0x12, 0xfb, 0x39, 0xa4, 0x73,
	0x10, 0xfd, 0x04, 0x6d, 0x27, 0x97, 0x7c, 0x09, 0xa4, 0xfe, 0x06, 0x38, 0xb9, 0xb1, 0x72, 0x55,
	0xab, 0x6a, 0xcd, 0x9e, 0xd4, 0xa7, 0xd1, 0xad, 0x9a, 0xdb, 0x9c, 0x1f, 0x42, 0xf7, 0x5a, 0xd8,
	0x9c, 0x1b, 0x83, 0xdd, 0x08, 0x68, 0x0d, 0xc9, 0xbb, 0xd0, 0x33, 0xfc, 0x45, 0xc1, 0xf3, 0x31,
	0xc7, 0x79, 0x0d, 0x69, 0x83, 0xa3, 0x2f, 0xc0, 0xc7, 0x46, 0x38, 0x71, 0x57, 0x2c, 0x2b, 0x38,
	0x9e, 0xd8, 0xa2, 0x73, 0xe0, 0xfa, 0xa2, 0x2e, 0x62, 0x33, 0xd6, 0x42, 0xd9, 0xca, 0x9f, 0x7a,
	0xea, 0xe2, 0x0c, 0x71, 0x94, 0x41, 0x1f, 0x27, 0x77, 0xc4, 0x0c, 0x7f, 0xed, 0x9f, 0xfe, 0xa3,
	0xad, 0xdf, 0x6f, 0xb6, 0xbd, 0x3f, 0x6e, 0xb6, 0xbd, 0x3f, 0x6f, 0xb6, 0xbd, 0x97, 0x7f, 0x6d,
	0xbf, 0x91, 0x74, 0xf0, 0xdf, 0x90, 0x83, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x52, 0x70, 0x69,
	0x3c, 0x96, 0x08, 0x00, 0x00,
}
